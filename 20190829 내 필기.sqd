[HEADER]
VERSION=6.0.1
TOOL=
CHAR=ASCII
DATE=2019-08-29 17:51
[WORKSPACE]
COUNT=3
NAME=SQL1
STMT=67
--1) STUDENT테이블에서 각 학생의 이름, 제1전공학과명을 출력하고
--담당지도교수 이름과 지도교수의 소속 학과명도 함께 출력하여라.
--단, 지도교수가 없는 학생도 모두 출력

-- s-d1
-- |
-- p(+)
-- |
-- d2(+)

--s1 - e1
-- |    |
--s2 - e2
--위와 같은 순환 구조는 다음과 같이 (+)를 붙이면 아우터 조인이 성립이 안되므로 순환구조를 끊어줘야 한다.
--s1(+) - e1(+)       (s1-e1)
-- |      |       =>     |        : 이런식으로 풀어준다. 그룹화가 필요함, 서브쿼리라 부른다. cf) group by : 행을 묶는 것
--s2(+) - e2(+)       (s2-e2)(+)

select s.NAME, d1.DNAME 학생학과명, p.NAME, d2.DNAME 교수학과명
  from student s, department d1, professor p, department d2  -- d1, d2로 안나눌 경우, d.deptno = s.DEPTNO1 = p.DEPTNO가 성립된다.
 where s.DEPTNO1 = d1.DEPTNO
   and s.PROFNO = p.PROFNO(+)
   and p.DEPTNO = d2.DEPTNO(+);  -- p-d2의 관계가 이어져 있고, s-p와도 관계가 이어져 있기 때문에 만약 s-p가 매칭되는 정보가 없으면 결국 s-d랑 매칭되는 정보도 없기 때문에 둘다(+)를 붙인다.
                                 -- p와 관련된 모든 데이터는 s기준으로는 없는 데이터 이므로 (+)를 붙임.



--2) student 테이블과 exam_01, department 테이블을 이용하여 각 학과별 평균 점수와 최고 점수,
--최저 점수를 나타내되 학과이름, 학과번호와 함께 출력되도록 작성하여라.
select s.DEPTNO1, d.DNAME, avg(e.TOTAL), max(e.TOTAL), min(e.TOTAL)
  from student s, EXAM_01 e, DEPARTMENT d
 where s.STUDNO = e.STUDNO
   and s.DEPTNO1 = d.DEPTNO
 group by s.DEPTNO1, d.DNAME;

--3) STUDENT테이블 내에서 같은 학년내 각 학생보다 키가 큰 학생의 수를 출력하되,
--학생이름, 학과번호, 학년을 함께 출력하여라.
select s1.NAME, s1.DEPTNO1, s1.GRADE, count(s2.STUDNO)
  from student s1, STUDENT s2
 where s1.GRADE = s2.GRADE(+)
   and s1.HEIGHT < s2.HEIGHT(+)  --  관련된 모든 테이블에 (+) 붙이기!!!
 group by s1.NAME, s1.DEPTNO1, s1.GRADE;
 
--실습문제2) PROFESSOR 테이블에서 교수의 번호, 교수이름, 입사일, 자신보다 입사일이 빠른 사람 인원수를 출력하세요.
--단, 자신보다 입사일이 빠른 사람수를 오름차순으로 출력하세요.
select p1.NAME, p1.HIREDATE, count(p2.PROFNO)
  from PROFESSOR p1, PROFESSOR p2
 where p1.HIREDATE > p2.HIREDATE(+)
 group by p1.NAME, p1.HIREDATE
 order by COUNT(P2.PROFNO);

select * from PROFESSOR;

--4) DEPARTMENT테이블을 사용하여 아래와 같은 형식으로 출력하여라.
--컴퓨터공학과의 상위학과는 컴퓨터정보학부이다.
--단, 상위학과가 없는 경우는 학과이름을 그대로 출력(공과대학의 상위학과는 공과대학이다)
select d1.DNAME||'의 상위학과는 '||nvl(d2.DNAME,d1.DNAME)||'이다.'
  from DEPARTMENT d1, DEPARTMENT d2
 where d1.PART = d2.DEPTNO(+);  -- self join을 하게 되면 많은 경우 outer join을 하게 된다.


--5) professor 테이블에서 홈페이지 주소가 있으면 그대로 출력, 없으면 아래와 같이 출력
--http://www.naver.com/email_id
--단, email_id는 email 주소의 @ 앞의 문자라 가정한다.  -- join 필요없는 문제. 불필요한 조인은 성능상 문제가 생긴다.
select email, substr(EMAIL,1,instr(EMAIL,'@')-1)
       hpage, nvl(hpage, 'http://www.naver.com/'||substr(EMAIL,1,instr(EMAIL,'@')-1))
  from PROFESSOR;
VAR=0
NAME=SQL2
STMT=262
-- self join
-- 연습문제) emp테이블에서 각 직원과 입사년도가 같으면서 연봉이 높은 동료직원의
-- 이름과 소속부서명을 출력하되 동료직원이 없는 경우도 모두 출력하여라
select e1.ENAME, d1.DNAME,  e2.ENAME, d2.DNAME
  from emp e1, emp e2, DEPT d1, DEPT d2
 where to_char(e1.HIREDATE,'YYYY') = to_char(e2.HIREDATE,'YYYY')
   and e1.SAL < e2.SAL(+)
   and e1.DEPTNO = d1.DEPTNO(+)
   and e2.DEPTNO = d2.DEPTNO(+);
   
   select to_char(to_date(hiredate, 'YYYY/MM/DD'),'MM') from emp; -- 되긴 하는데 굳이 이럴필요 없음. datetype 잘 확인할것!! to_char(hiredate,'MM') 이렇게까지만 하는게 더 좋음.
   -- 날짜함수에는  to_date도 있지만, to_char도 날짜함수이다.
   
   
 select e1.ename, e1.sal, to_char(e1.hiredate,'YYYY'),
        e2.ename, e2.sal, to_char(e2.hiredate,'YYYY'), d.DNAME
   from emp e1, emp e2, dept d
  where to_char(e1.hiredate,'YYYY') = to_char(e2.hiredate(+),'YYYY')  -- (+)기호는 컬럼에다가 붙이는거다 ㅋㅋㅋ to_char(e2.hiredate(+),'YYYY') 
    and e1.sal < e2.sal(+)  -- e2가 동료직원
    and e2.DEPTNO = d.DEPTNO(+);
    
-- 연습문제) emp테이블에서 각 직원과 입사년도가 같으면서 연봉이 높은 동료직원의 수
-- e1-e2(+)-d(+) 
 
 select e1.ename, e1.sal, to_char(e1.hiredate,'YYYY') 입사년도,
        count(e2.DEPTNO) AS "입사년도 =, 연봉높은 직원의 수"
   from emp e1, emp e2, dept d
  where to_char(e1.hiredate,'YYYY') = to_char(e2.hiredate(+),'YYYY')  -- (+)기호는 컬럼에다가 붙이는거다 ㅋㅋㅋ to_char(e2.hiredate(+),'YYYY')
    and e1.sal < e2.sal(+)  
    and e2.DEPTNO = d.DEPTNO(+)
  group by e1.ename, e1.sal, to_char(e1.hiredate,'YYYY');
  
  select * from emp;
  


-- 서브쿼리 : select 문장 안에 삽입되는 또 다른 select 문
-- 서브쿼리는 메인쿼리와 구분되도록 쿼리 안밖으로 ()표시 필요

1. 서브쿼리의 종류
   1) 위치에 따른 구분
   select (select * from emp where...) -- scalar sub-query
     from (select * from emp where...) -- inline view.  view는 형태가 없는 테이블이라고 보면 된다.
    where (select * from emp where...) -- sub-query
    

   2) 형태에 따른 구분
    - 단일행 서브쿼리 : 서브쿼리의 결과가 단 하나의 행을 갖는 경우를 말하며
                        =,<,>의 비교식 표현이 가능
                        
      예제) emp 테이블에서 scott보다 급여가 높은 사람의 이름과 급여를 출력
      step1) scott의 sal 확인;
      select sal
        from emp
       where ename = 'SCOTT'; -- 3000
      step2) 위의 결과를 사용, 쿼리 수행;
      select ename, sal
        from emp
       where sal > 3000;
       
       step3) 상수를 쿼리로 대체;
       select ename, sal   -- 괄호 밖 : 메인쿼리
        from emp
       where sal > (select sal
                      from emp
                     where ename = 'SCOTT'); -- 괄호 안 : 서브쿼리
                     
      
    - 다중행 서브쿼리 : 서브쿼리 결가가 두 개 이상의 행을 리턴하는 경우.
                        =,<,> 비교식 표현이 불가, =는 in연산자 대체 가능.
                        
      예제) smith와 allen의 부서와 같은 부서 소속의 직원을 출력;
      select * from emp;
      step1);
      select deptno
        from emp
       where ename in ('SMITH', 'ALLEN');
       
      step2);
      select *
        from emp
       where deptno in (20,30); -- 결과값 도출 불가 = 사용 불가하고 in연산자로 대체 가능
      
      step3);
       select *
        from emp
       where deptno in (select deptno
                          from emp
                         where ename in ('SMITH', 'ALLEN'));
                         
      예제) smith와 allen의 급여보다 높은 급여를 받는 직원의 정보
      step1);
      select sal
        from emp
       where ename in ('SMITH', 'ALLEN');
       
      step2);
      select *
        from emp
       where sal > max(800,1600); -- 연산불가. <,>를 사용하면 결과값이 도출이 안된다. 하나로 만들어서 <,>로 비교를 해야한다. where절에서는 avg, max, min등과 같은 그룹함수 사용이 불가하다는 점!!(문법수행순서 참고)
      
      step3);
      select *
        from emp
       where sal > (select max(sal) -- max는 where절에서 사용이 불가하므로 select절에 쓴다. 문법수행순서참고.
                      from emp
                     where ename in ('SMITH', 'ALLEN'));
                     
       select *
        from emp
       where sal > (select sal -- smith의 sal과 allen의 sal이 2개라서 결과값이 안된다. 만약 우연히 smith와 allen의 sal이 위치적으로 같다면 결과값은 도출이 되기는 한다. 이해가 안돼면 양쪽 다 smith, smith 해보셈
                      from emp
                     where ename in ('SMITH', 'ALLEN'));

                     
      select *
        from emp
       where sal > max(select sal -- 수행불가. where절에서 max를 대체할 수 있는 함수는 all이다. all이란 함수는 >와 결합하여 max = >all. <와 결합하면 min = <all.
                      from emp
                     where ename in ('SMITH', 'ALLEN'));
      
      select *
        from emp
       where sal > all(select sal 
                      from emp
                     where ename in ('SMITH', 'ALLEN')); 
                     
> all(1000,2000) = > 2000 : 최대값리턴
> any(1000,2000) = > 1000 : 최소값리턴
< all(1000,2000) = < 1000 : 최소값리턴 
< any(1000,2000) = < 2000 : 최대값리턴
;
      
-- 연습문제 1) STUDENT 테이블에서 ID가 bingo인 학생과 같은 학년의 학생번호와 이름,
-- 시험성적을 출력하세요.
select s.STUDNO, s.NAME, s.GRADE, e.TOTAL
  from STUDENT s, EXAM_01 e
 where s.STUDNO = e.STUDNO
   and s.GRADE = (select GRADE
                    from STUDENT
                   where ID = 'bingo');


-- 연습문제 2) STUDENT 테이블에서 제1전공이 101번인 학과의 평균몸무게보다
-- 몸무게가 많은 학생들의 이름과 몸무게를 출력하세요.
select NAME, WEIGHT
  from student
 where deptno1 = 101 
   and WEIGHT > (select avg(WEIGHT)
                   from STUDENT
                  where DEPTNO1 = 101);
                  
select NAME, WEIGHT
  from student
 where WEIGHT > (select avg(WEIGHT)
                   from STUDENT
                  where DEPTNO1 = 101);
                  
select * from student where deptno1 = 101;

-- 연습문제 3) PROFESSOR 테이블에서 심슨과 입사년도가 같으면서 조인형의 pay보다
-- 적게받는 교수의 이름, pay, 입사일을 구하여라.
select NAME,PAY,HIREDATE
  from PROFESSOR
 where to_char(HIREDATE,'YYYY') = (select to_char(HIREDATE,'YYYY')
                                     from PROFESSOR
                                    where NAME = '심슨')
   and pay < (select PAY
                from PROFESSOR
               where NAME = '조인형');
               
      
    - 다중컬럼 서브쿼리 : 서브쿼리로 비교할 컬럼이 두개 이상일 경우 
    예제) emp 테이블에서 10번 부서원 중 가장 연봉이 높은 사람의 이름, 부서번호, pay 출력
    step1);
    select max(sal)
      from emp
     where deptno=10;
    
    step2);
    select *
      from emp
     where deptno = 10
       and sal = 5000;
       
    select *
      from emp
     where (deptno,sal) = (10,5000); -- 연산불가. 상수에 대해 다중컬럼 비교는 불가. 다중컬럼 서브쿼리로 가능. 
     
     step3);
     select *
       from emp
      where (deptno,sal) = (select deptno, max(sal)
                              from emp
                             where deptno=10
                             group by deptno);
                             
      select deptno, max(sal)
        from emp
       where deptno=10; -- 연산이 안돼는 이유 : 그룹함수(max)를 사용하면서 group by를 안써서 그렇다.
       
       select deptno, max(sal)
        from emp
       where deptno=10
       group by deptno;
       
      
      예제) emp 테이블에서 각 부서별 최대연봉을 구하고 최대연봉자 이름도 함께 출력;
     select *
       from emp
      where (deptno,sal) = (select deptno, max(sal)
                              from emp
                             group by deptno); -- 단일 행 하위의 질의에 2개 이상의 행이 리턴되었습니다. : 위의 예제에선 deptno = 10번만 해서(단일행) 가능했는데, 지금은 모든 deptno를 다루므로(여러개의 행) where절에서 = 는 수행이 안되고 in을 써야한다. deptno = 10해도 in사용 가능.
             
             -- 다중컬럼의 한계 : 다중컬럼은 대소비교가 불가능하다.(<,> 불가)
             
     select *
       from emp
      where (deptno,sal) in (select deptno, max(sal)
                               from emp
                              group by deptno); -- group by가 서브쿼리 절에 있으므로 메인쿼리절에 group by의 영향을 안받으므로 select절에 어떤 컬럼을 넣어도 상관 ㄴㄴ
                              
-- 연습문제) STUDENT테이블에서 각 학년별 최대 키를 갖는 학생의 이름, 학년, 키 출력 
select NAME,GRADE,HEIGHT
  from student
 where (GRADE,HEIGHT) in (select GRADE, max(HEIGHT)
                            from STUDENT
                           group by GRADE);
 
-- inline view : 서브쿼리 중 from절에 쓰는 서브쿼리를 의미.
-- 서브쿼리의 결과를 마치 하나의 테이블처럼 가정, 다른 테이블과 조인하기 위해 사용, 만드시 Alias를 써야한다.

--예제) 위 결과를 인라인뷰 표현식으로 변경
select s.NAME, s.GRADE, s.HEIGHT
  from student s, (select GRADE, max(HEIGHT) AS max_height
                     from STUDENT
                    group by GRADE) i
 where s.GRADE = i.grade
   and s.HEIGHT = i.max_height;  -- where절에 그룹함수(avg, max, min...) 허가 ㄴㄴ. 그래서 Alias처리해줘서 가져와야 한다.
   
   
select s.NAME, s.GRADE, s.HEIGHT
  from student s, (select GRADE, avg(HEIGHT) AS avg_height
                     from STUDENT
                    group by GRADE) i
 where s.GRADE = i.grade
   and s.HEIGHT < i.avg_height;  -- 대소비교(<,>) 됨. 그룹별 대소 비교가 가능하다(학년이 같으면서 그 내부에 학년보다 그 상수가 낮은). 다중컬럼 서브쿼리의 한계인 대소비교를 가능하게 해준다.

--예제) STUDENT 테이블에서 각 학년의 평균키보다 작은 학생의
--이름, 학년, 키, 평균키 출력
select s.NAME, s.GRADE, s.HEIGHT, i.avg_height
  from student s, (select GRADE, avg(HEIGHT) AS avg_height
                     from STUDENT
                    group by GRADE) i
 where s.GRADE = i.grade
   and s.HEIGHT < i.avg_height;



    - 상호연관 서브쿼리
    
    ;
VAR=5
:서브쿼리의=0,
:서브쿼리=0,
:최대값리턴=0,
:최소값리턴=0,
:서브쿼리로=0,
NAME=SQL3
STMT=106
-- 1) emp2 테이블에서 나이가 같으면서 부서이면서 취미가 같은 직원의 수를
--직원의 이름, 부서이름, 취미, pay와 함께 출력하여라.
select e1.NAME, d.DNAME, e2.HOBBY, e1.PAY
  from emp2 e1, emp2 e2, dept2 d
 where e1.deptno = d.dcode
   and e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY;
   
   select e1.DEPTNO, e1.HOBBY
  from emp2 e1, emp2 e2
 where e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY
  group by e1.deptno, e1.hobby;
   
select * from emp2;
select * from DEPT2;

select e1.NAME, d.DNAME, e2.HOBBY, e1.PAY, count(
  from emp2 e, (select *
                  from emp2 e, dept2 d
                  
 where e1.deptno = d.dcode
   and e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY;

select *
  from emp2 e, dept2 d
 where e.deptno = d.dcode;
 
 
 select s.NAME, s.GRADE, s.HEIGHT
  from student s, (select GRADE, max(HEIGHT) AS max_height
                     from STUDENT
                    group by GRADE) i
 where s.GRADE = i.grade
   and s.HEIGHT = i.max_height;

-- 2) emp 테이블에서 이름이 S로 시작하는 사원의 연봉보다 큰 연봉을 갖는
-- 사원의 이름, 직업, 연봉을 출력
select ename, job, sal
  from emp
 where SAL > (select max(sal)
                from EMP
               where ENAME like 'S%');

-- 3) STUDENT테이블에서 성별로 평균몸무게보다 높은 학생의 이름, 학년, 몸무게, 평균몸무게 출력
-- 3-1) 다중컬럼 서브쿼리
select NAME, GRADE, WEIGHT,
       decode(substr(JUMIN,7,1),'1','남자','여자')
  from student
 where (;

select name, grade, weight,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from STUDENT
MINUS
select NAME, GRADE, WEIGHT,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from student
 where (decode(substr(JUMIN,7,1),'1','남자','여자'), weight) in (select decode(substr(JUMIN,7,1),'1','남자','여자'), avg(weight)
                                                                   from student
                                                               group by decode(substr(JUMIN,7,1),'1','남자','여자'));


-- 3-2) 인라인뷰
select s.NAME, s.GRADE, s.WEIGHT, round(i.avg_weight,2) 평균몸무게,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from student s, (select decode(substr(JUMIN,7,1),'1','남자','여자') 성별, avg(weight) AS avg_weight
                     from student
                    group by decode(substr(JUMIN,7,1),'1','남자','여자')) i
 where decode(substr(JUMIN,7,1),'1','남자','여자') = i.성별
   and s.WEIGHT > i.avg_weight;




select name, weight
  from STUDENT;
select decode(substr(JUMIN,7,1),'1','남자','여자'), avg(weight)
                                                                   from student
                                                               group by decode(substr(JUMIN,7,1),'1','남자','여자');

--4) emp2 테이블에서 각 지역별(지역번호 참조) 직원의 평균연봉보다 더 많은 연봉을 받는
-- 직원의 이름, 고용형태, 지역, pay, 직급을 구하여라.
select e1.NAME, e1.EMP_TYPE, e1.PAY, e1.POSITION, e2. 평균연봉,
       substr(TEL,1,instr(TEL,')',1)-1) 지역
  from EMP2 e1, (select substr(TEL,1,instr(TEL,')',1)-1) 지역번호, round(avg(PAY)) 평균연봉
                   from EMP2
                  group by substr(TEL,1,instr(TEL,')',1)-1)) e2
 where substr(TEL,1,instr(TEL,')',1)-1) = e2. 지역번호
   and e1.pay > e2.평균연봉;
  
select substr(TEL,1,instr(TEL,')',1)-1) from emp2;
  
--5) emp 테이블을 이용하여 본인과 상위관리자의 평균연봉보다 많은 연봉을 받는 직원의
--이름, 부서명, 연봉, 상위관리자명을 출력하여라.
select * from emp;
select e1.ENAME 이름, e2.ENAME 상위관리자, e1.sal 연봉
  from emp e1, emp e2, dept d, (select ((e1.sal+e2.sal)/2) 평균
                                  from emp e1, emp e2
                                 where e1.MGR = e2.EMPNO
                                 group by ((e1.sal+e2.sal)/2)) e3
 where e1.MGR = e2.EMPNO
   and e1.DEPTNO = d.DEPTNO
   and e1.sal > e3.평균;

VAR=0
