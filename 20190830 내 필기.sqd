[HEADER]
VERSION=6.0.1
TOOL=
CHAR=ASCII
DATE=2019-08-30 17:44
[WORKSPACE]
COUNT=2
NAME=SQL2
STMT=188
-- 1) emp2 테이블에서 나이가 같으면서 부서이면서 취미가 같은 직원의 수를
--직원의 이름, 부서이름, 취미, pay와 함께 출력하여라.
select e1.NAME, d.DNAME, e2.HOBBY, e1.PAY
  from emp2 e1, emp2 e2, dept2 d
 where e1.deptno = d.dcode
   and e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY;
   
   select e1.DEPTNO, e1.HOBBY
  from emp2 e1, emp2 e2
 where e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY
  group by e1.deptno, e1.hobby;
   
select * from emp2;
select * from DEPT2;

select e1.NAME, d.DNAME, e2.HOBBY, e1.PAY, count(
  from emp2 e, (select *
                  from emp2 e, dept2 d
                  
 where e1.deptno = d.dcode
   and e1.DEPTNO = e2.DEPTNO
   and e1.HOBBY = e2.HOBBY;

select *
  from emp2 e, dept2 d
 where e.deptno = d.dcode;
 
 
 select s.NAME, s.GRADE, s.HEIGHT
  from student s, (select GRADE, max(HEIGHT) AS max_height
                     from STUDENT
                    group by GRADE) i
 where s.GRADE = i.grade
   and s.HEIGHT = i.max_height;
   
-- 답
-- e1-e2(+)
-- |
-- d

select e1.NAME, trunc((sysdate - e1.BIRTHDAY)/365) 직원나이, e1.HOBBY, e1.pay, d.DNAME,
       count(e2.EMPNO) 동료직원수
  from emp2 e1, emp2 e2, dept2 d
 where e1.DEPTNO = d.DCODE
   and trunc((sysdate - e1.BIRTHDAY)/365) = trunc((sysdate - e2.BIRTHDAY(+))/365)
   and e1.HOBBY = e2.HOBBY(+) -- 잘 나온 데이터로부터 일부 행을 삭제하고 싶으면 where절에서 컨트롤 해야 한다.
   and e1.EMPNO != e2.EMPNO(+) -- 동명이인이 있을 수 있기 때문에 사원번호를 쓰는 것이 더 신뢰성이 높다.
 group by e1.NAME, trunc((sysdate - e1.BIRTHDAY)/365), e1.HOBBY, e1.pay, d.DNAME;
  
-- cf) select * from tab; : 본인 유저가 갖고 있는 테이블을 조회할 수 있는 뷰


-- 2) emp 테이블에서 이름이 S로 시작하는 사원의 연봉보다 큰 연봉을 갖는
-- 사원의 이름, 직업, 연봉을 출력
select ename, job, sal
  from emp
 where SAL > (select max(sal)
                from EMP
               where ENAME like 'S%');
               
--답
select SAL
  from emp
 where ename like 'S%';

select *
  from emp
 where sal > (select max(SAL)
                from emp
               where ename like 'S%'); -- 다중행 서브쿼리 : 서브쿼리의 결과값이 여러개일때...

-- 3) STUDENT테이블에서 성별로 평균몸무게보다 높은 학생의 이름, 학년, 몸무게, 평균몸무게 출력
-- 3-1) 다중컬럼 서브쿼리 -- 풀수가 없음... 다중컬럼 서브쿼리는 대소비교가 안댐..ㅇㅇ. 동등비교는 가능... 다중행일 경우 = 사용 불가, in 사용  
select NAME, GRADE, WEIGHT,
       decode(substr(JUMIN,7,1),'1','남자','여자')
  from student
 where (;

select name, grade, weight,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from STUDENT
MINUS
select NAME, GRADE, WEIGHT,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from student
 where (decode(substr(JUMIN,7,1),'1','남자','여자'), weight) in (select decode(substr(JUMIN,7,1),'1','남자','여자'), avg(weight)
                                                                   from student
                                                               group by decode(substr(JUMIN,7,1),'1','남자','여자'));

-- 답 -- 최대몸무게 학생을 찾는 문제로 변경
select decode(substr(jumin,7,1),'1','남자','여자'), max(weight)
  from STUDENT
 group by decode(substr(jumin,7,1),'1','남자','여자');

select *
  from STUDENT
 where (decode(substr(jumin,7,1),'1','남자','여자'),
        weight) in (select decode(substr(jumin,7,1),'1','남자','여자'), max(weight)
                      from STUDENT
                     group by decode(substr(jumin,7,1),'1','남자','여자'));
 
 
 
 

-- 3-2) 인라인뷰
select s.NAME, s.GRADE, s.WEIGHT, round(i.avg_weight,2) 평균몸무게,
       decode(substr(JUMIN,7,1),'1','남자','여자') 성별
  from student s, (select decode(substr(JUMIN,7,1),'1','남자','여자') 성별, avg(weight) AS avg_weight
                     from student
                    group by decode(substr(JUMIN,7,1),'1','남자','여자')) i 
 where decode(substr(JUMIN,7,1),'1','남자','여자') = i.성별   -- decode(substr(JUMIN,7,1),'1','남자','여자')가 아니라 decode(substr(s.JUMIN,7,1),'1','남자','여자')임
   and s.WEIGHT > i.avg_weight;
   


--답
select *
  from STUDENT s, (select decode(substr(jumin,7,1),'1','남자','여자') 성별, avg(weight) AS avg_weight
                     from STUDENT
                    group by decode(substr(jumin,7,1),'1','남자','여자')) i
 where decode(substr(s.jumin,7,1),'1','남자','여자') = i.성별
   and s.WEIGHT > i.avg_weight;




select name, weight
  from STUDENT;
select decode(substr(JUMIN,7,1),'1','남자','여자'), avg(weight)
                                                                   from student
                                                               group by decode(substr(JUMIN,7,1),'1','남자','여자');

--4) emp2 테이블에서 각 지역별(지역번호 참조) 직원의 평균연봉보다 더 많은 연봉을 받는
-- 직원의 이름, 고용형태, 지역, pay, 직급을 구하여라.
select e1.NAME, e1.EMP_TYPE, e1.PAY, e1.POSITION, e2. 평균연봉,
       substr(TEL,1,instr(TEL,')',1)-1) 지역
  from EMP2 e1, (select substr(TEL,1,instr(TEL,')',1)-1) 지역번호, round(avg(PAY)) 평균연봉
                   from EMP2
                  group by substr(TEL,1,instr(TEL,')',1)-1)) e2
 where substr(TEL,1,instr(TEL,')',1)-1) = e2. 지역번호
   and e1.pay > e2.평균연봉;
  
select substr(TEL,1,instr(TEL,')',1)-1) from emp2;

-- 답
select substr(tel,1,instr(tel,')')-1), avg(pay)
  from emp2
 group by substr(tel,1,instr(tel,')')-1);
 
select *
  from EMP2 e, (select substr(tel,1,instr(tel,')')-1) 지역번호, 
                       avg(pay) AS avg_pay
                  from emp2
                 group by substr(tel,1,instr(tel,')')-1)) i
 where substr(e.tel,1,instr(e.tel,')')-1) = i.지역번호
   and e.pay > i.avg_pay;

  
--5) emp 테이블을 이용하여 본인과 상위관리자의 평균연봉보다 많은 연봉을 받는 직원의
--이름, 부서명, 연봉, 상위관리자명을 출력하여라.
select * from emp;
select e1.ENAME 이름, e2.ENAME 상위관리자, e1.sal 연봉
  from emp e1, emp e2, dept d, (select ((e1.sal+e2.sal)/2) 평균
                                  from emp e1, emp e2
                                 where e1.MGR = e2.EMPNO
                                 group by ((e1.sal+e2.sal)/2)) e3  -- group by는 행을 묶는거지 컬럼을 묶는게 아니다... 그래서 이 문제에서는 group by를 쓰는 것은 옳지 않다.
                                
 where e1.MGR = e2.EMPNO
   and e1.DEPTNO = d.DEPTNO
   and e1.sal > e3.평균;
   
   
   
-- 답 
select e1.ename AS 직원이름, e1.sal AS 직원연봉,
       e2.ename AS 상위관리자이름, e2.sal AS 상위관리자연봉
  from emp e1, emp e2
 where e1.MGR = e2.EMPNO  -- group by는 행을 묶는거지 컬럼을 묶는게 아니다... 그래서 이 문제에서는 group by를 쓰는 것은 옳지 않다.
   and e1.sal > (e1.sal + e2.sal)/2;
 
   
   
   
-- decode는 절대로 조건이 들어갈 수 없다.(between and,<,>,= 등등 못들어감)
-- instr, substr에 숫자나 날짜도 가능하긴 함.
VAR=0
NAME=SQL3
STMT=240
-- 다중 컬럼 서브쿼리의 대소 비교
--ex) STUDENT테이블에서 학년별 평균키보다 큰 학생의 정보 출력
select *
  from STUDENT
 where (grade, height) > (select grade, avg(height)
                            from STUDENT
                           group by grade); -- 수행불가 :  2개의 컬럼이 묶여있어서 에러
                           
select *
  from STUDENT
 where height > (select avg(height)
                   from STUDENT
                  group by grade)
   and grade = grade;    -- 수행불가 : 단일행이 안나와서 에러, and grade = grade 먼저 읽고  where height > (select avg(height) from STUDENT group by grade) 읽기 때문에 수행불가하다. 설사 and s1.grade = s2.grade해도 못읽는다.
   
select *
  from STUDENT s1
 where height > (select avg(height)
                   from STUDENT s2
                  where s1.grade = s2.grade -- 수행됨. 이유는 수업시간
                  -- group by grade) -- group by는 생략이 가능하다. : 서브쿼리 where절에서 이미 한 학년에 대한 선택을 했기 때문에 그룹바이는 더이상 필요가 없다. 상호연관 서브쿼리가 되는 순간 그룹바이가 빠지게 되고 그룹바이를 빼게 되면 사람의 해석상 차이가 있을수 있다.
;

-- 인라인 뷰와 상호연관 서브쿼리랑 차이점 : 상호연관 서브쿼리의 경우 서브쿼리 정보가 메인쿼리절에 안나타난다  where절의 기능은 제한. 인라인뷰의 경우는 서브쿼리절 정보가 메인쿼리절에 나타남 from절의 기능은 테이블명을 기술하여 메인쿼리에 표현하는 곳. 출처 밝히는 곳
select *
  from STUDENT s1
 where height > (select avg(height)
                   from STUDENT s2
                  where s1.grade = s2.grade -- 수행됨. 이유는 수업시간
                  -- group by grade
                  );
                  
select *
  from STUDENT s, (select grade, avg(height) avg_h
                   from STUDENT
                  group by grade) i
 where s.grade = i.grade
   and s.height > i.avg_h;

-- 상호연관 서브쿼리는 인라인 뷰에 비해 성능이 떨어진다. 매 행을 수행할때마다 계산을 새로 시작함.
-- 상호연관 서브쿼리의 내부적 수행 순서
--step1) 첫번째 행의 height 확인
--step2) 첫번째 행의 s1.grade 확인 => s1.grade = s2.grade. s1.grade가 상수처리 된다. 예) 4 = s2.grade로 바뀜
--step3) 4학년(첫번째 행 학년)의 평균키를 계산
--step4) 4학년의 평균키보다 큰지 여부 확인 -> 1set
--step5) 위의 단계를 모든행에 대해 수행

--동등비교 : 인라인뷰, 상호연관 서브쿼리, 다중컬럼 서브쿼리
--대소비교 : 인라인뷰, 상호연관 서브쿼리



--연습문제1) PROFESSOR 테이블에서 각 부서별 최대연봉을 갖는 교수의 이름, 교수번호, pay 출력
-- 다중컬럼과 상호연관의 차이점 : 대소비교가 불가한 것은 다중컬럼, 가능한 것은 상호연관
--1) 다중컬럼 : select DEPTNO, max(pay) from PROFESSOR group by DEPTNO 상수처리
select deptno,NAME,PROFNO,PAY
  from PROFESSOR
 where (DEPTNO, pay) in (select DEPTNO, max(pay)
                           from PROFESSOR
                          group by DEPTNO)  
 order by name;

--2) 인라인뷰 : select DEPTNO, max(pay) m_pay from PROFESSOR group by DEPTNO테이블처리
select p.deptno,p.NAME,p.PROFNO,p.PAY -- alias를 안써줘도 되긴하다. 테이블이 인라인뷰랑 달라서..
  from PROFESSOR p, (select DEPTNO, max(pay) m_pay
                           from PROFESSOR
                          group by DEPTNO) i
 where p.DEPTNO = i.deptno
   and p.PAY = i.m_pay
 order by p.name;

--3) 상호연관 : where p1.DEPTNO = p2.DEPTNO에서 p1.DEPTNO 상수처리
select deptno,NAME,PROFNO,PAY
  from PROFESSOR p1
 where pay = (select max(pay)
                from PROFESSOR p2
               where p1.DEPTNO = p2.DEPTNO) -- 매 단계마다 각각 요소들을 비교한다. where p1.DEPTNO = p2.DEPTNO 단계에서 그룹별로 묶어서 비교를 하기 때문에 group by가 생략된것이다. 예를 들어 p1.DEPTNO = 101이라고 한다면 where 101 = p2.DEPTNO이므로 이미 그룹이 형성된 것이다.
 order by name;

--연습문제2) EMP2 테이블에서 각 고용타입(emp_type)별 평균연봉 보다 높은 사람의
--이름, 부서이름, 연봉, 해당 고용타입의 평균연봉 출력
select e.NAME, d.DNAME, e.PAY, e.EMP_TYPE, i.avg_pay 평균연봉
  from emp2 e, dept2 d, (select EMP_TYPE, avg(PAY) avg_pay
                           from EMP2
                          group by EMP_TYPE) i
 where e.DEPTNO = d.DCODE
   and e.EMP_TYPE = i.emp_type
   and e.PAY > i.avg_pay;
   
-- 선생님 풀이
select emp_type, avg(pay)
  from EMP2
 group by emp_type;
   
select e.NAME, e.DEPTNO, d.DNAME, e.PAY, e.EMP_TYPE, i.avg_p  -- 인라인뷰에서 * = e.*, i.*, NULL은 select절에서 출력이 된다. null치환 = nvl
  from emp2 e, (select emp_type, avg(pay) avg_p
                  from EMP2
                 group by emp_type) i, dept2 d
 where e.emp_type = i.emp_type(+)
   and e.pay > i.avg_p(+)  -- e.pay > i.avg_p(+) 해당조건으로 인해 avg_p가 같거나 작은 사람들은 avg_p가 NULL로 출력된다.!! NULL은 select절에서 from절에서 사용된 테이블을 기반으로 표현한 것을 출력하는 역할이다.
   and e.DEPTNO = d.DCODE;
   
---------------------------------------------------------------------------------------------------------   
-- group by 연습문제 : 그룹별(학과별, 이름별...) 의미를 만들기 위한 group by 컬럼 선택
create table emp_group
as
select * from emp; -- 테이블 백업, ctas, 데이터 복사 명령어. 뷰아님. 실제 테이블을 만든거임.

select * from emp_group;

insert into emp_group values(7370, 'SMITH', 'CLERK', 7902,    -- insert into : 행삽입 명령어. 테이블에 데이터를 인서트 할때는 컬럼 순서에 따라 쭉 나열해주면 된다.
                             to_date('1981/12/17', 'YYYY/MM/DD'), 800, null, 20);
                            
commit; -- 저장명령어


--group by 연습문제) emp_group 테이블을 사용하여 각 직원과 같은 부서내에 선배수를 출력
--단, ename,job, sal이 모두 출력되도록 하여라.
--ename job    sal  선배수
--SMITH CLERK  800  0
select e1.ename, e1.JOB, e1.SAL, count(e2.EMPNO) 선배수, e1.hiredate
  from emp_group e1, emp_group e2
 where e1.deptno = e2.deptno(+)
   and e1.HIREDATE > e2.HIREDATE(+) -- 선배는 날짜를 숫자로 따졌을때, 후배보다 숫자가 작다는것!!
 group by e1.EMPNO, e1.ename, e1.JOB, e1.SAL, e1.hiredate; -- 동명이인이 있어서 ename 으로 하면 14줄이 나오는데, empno까지 추가해야 15행이 나온다!!
                                                           -- group by에 선언된 컬럼은 꼭 select절에 선언되지 않아도 된다. 다만 select절에 넣고 싶으면 group by절에는 꼭 기입해야 한다.

select count(nvl2(COMM,comm,0)), count(nvl(comm,0)) -- null이 들어간 컬럼을 셀때는 nvl이나 nvl2함수 사용하기. 가급적 not null컬럼 desc로 조회하고 쓰기
  from emp_group;
  
select * from emp_group;



-- 스칼라 서브쿼리 : select절에 사용하는 서브쿼리로 정보출력에 목적이 있음(조인의 대체). select절의 목적은 컬럼표현.
--예제) emp테이블에서 각 직원의 부서명을 함께 출력하여라
--조인)
select e.ENAME, d.DNAME
  from emp e, dept d
 where e.DEPTNO = d.DEPTNO;
 
-- 조인조건 생략시? emp테이블과 dept테이블의 모든 경우의 수 출력(from절에 나열된 모든 행)

-- 스칼라 서브쿼리) 수학에서 스칼라의 의미는 1개이다.
select e.ENAME, (select d.DNAME from dept d)
  from emp e;
 where e.DEPTNO = d.DEPTNO; -- 수행 불가 : select절 수행 이전에 수행이 되어서 메인쿼리에서는 d.deptno를 못읽는다.


select e.ENAME, (select d.DNAME from dept d where e.DEPTNO = d.DEPTNO)
  from emp e;
  
 -- 스칼라 서브쿼리의 최대 단점 : 컬럼을 하나밖에 못올림...
 select e.ENAME, (select d.DNAME, d.loc from dept d where e.DEPTNO = d.DEPTNO) -- 수행불가 : 스칼라 서브쿼리에 기입된 컬럼이 2개임...
  from emp e;
  
  select e.ENAME, 
         (select d.DNAME from dept d where e.DEPTNO = d.DEPTNO) 부서명,
         (select d2.loc from dept d2 where e.DEPTNO = d2.DEPTNO) 위치
  from emp e; -- 조인보다 성능상 불리하다. 컬럼마다 테이블 엑세스를 해야하므로...
  
  
  
  
  
--문제1) emp테이블에서 직업별 최대연봉을 구하고, 직업별 최대연봉을 갖는
--직원의 이름, 직업, 연봉을 구하세요.
--(다중컬럼, 인라인뷰, 상호연관 서브쿼리)
-- 다중컬럼
select JOB, max(SAL)
  from EMP
 group by job;

select ENAME,JOB,SAL
  from emp
 where(JOB,SAL) in (select JOB, max(SAL)
                      from EMP
                     group by job);
                     
-- 인라인뷰
select e.ENAME, e.JOB, e.SAL
  from emp e, (select JOB, max(SAL) max_sal
                 from EMP
                group by job) i
 where e.job = i.job
   and e.sal = i.max_sal;
   
-- 상호연관
select e1.ENAME, e1.JOB, e1.SAL
  from emp e1
 where SAL = (select max(SAL)
                from EMP e2
               where e1.job = e2.job);

--문제2) student 테이블과 exam_01 테이블을 사용하여 각 학생의 시험성적을 이름과 함께 출력하여라
--(스칼라 서브쿼리)
select s.NAME,
       (select e.TOTAL from EXAM_01 e where s.STUDNO=e.STUDNO) 시험성적
  from student s;


--문제3) professor 테이블에서 입사년도(1980, 1990, 2000년대)별 평균연봉보다 높은 연봉을 받는
--교수의 이름, 연봉, 지도학생 수를 출력하여라.
-- (인라인뷰, 상호연관)
-- 인라인뷰
select p.NAME, p.PAY, count(s.STUDNO) 학생수, trunc(to_char(p.HIREDATE,'YYYY'),-1) 입사년도
  from PROFESSOR p, student s, (select trunc(to_char(HIREDATE,'YYYY'),-1) hire, avg(PAY) avg_p
                                  from PROFESSOR
                                 group by trunc(to_char(HIREDATE,'YYYY'),-1)) i
   where p.PROFNO = s.PROFNO(+)
     and trunc(to_char(p.HIREDATE,'YYYY'),-1) = i.hire
     and p.pay > i.avg_p
   group by p.NAME, p.PAY, trunc(to_char(p.HIREDATE,'YYYY'),-1)
   order by p.name;

-- 상호연관
select p1.NAME, p1.PAY, count(s.STUDNO) 학생수, trunc(to_char(p1.HIREDATE,'YYYY'),-1) 입사년도
  from PROFESSOR p1, student s 
   where p1.PROFNO = s.PROFNO(+)
     and p1.pay > (select avg(PAY)
                     from PROFESSOR p2
                    where trunc(to_char(p1.HIREDATE,'YYYY'),-1) = trunc(to_char(p2.HIREDATE,'YYYY'),-1))
   group by p1.NAME, p1.PAY, trunc(to_char(p1.HIREDATE,'YYYY'),-1)
   order by p1.name;

--문제4) student, professor 테이블에서 같은지역, 같은 성별의 친구가 몇명인지 구하고,
--그 학생의 담당 교수 이름도 함께 출력되도록 하여라.
--단, 같은지역, 같은 성별에 본인은 포함될 수 없다.
select s.NAME 학생이름, nvl2(p.NAME, p.NAME, 'NONE') 교수이름, i.학생수
  from student s, professor p, (select substr(TEL,1,instr(TEL,')',1)-1) 지역, substr(JUMIN,7,1) 성별, count(studno)-1 학생수
                                  from STUDENT
                                 group by substr(TEL,1,instr(TEL,')',1)-1), substr(JUMIN,7,1)) i
 where s.PROFNO = p.PROFNO(+)
   and substr(s.TEL,1,instr(s.TEL,')',1)-1) = i.지역
   and substr(s.JUMIN,7,1) = i.성별;
   
select substr(TEL,1,instr(TEL,')',1)-1) 지역, substr(JUMIN,7,1) 성별, count(studno)
  from STUDENT
 group by substr(TEL,1,instr(TEL,')',1)-1), substr(JUMIN,7,1);

VAR=0
