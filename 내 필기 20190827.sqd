[HEADER]
VERSION=6.0.1
TOOL=
CHAR=ASCII
DATE=2019-08-27 12:41
[WORKSPACE]
COUNT=2
NAME=SQL1
STMT=51
--1) Student 테이블의 jumin 컬럼을 참조하여 학생들의 이름과 태어난 달, 그리고 분기를 출력하라.
--태어난 달이 01-03월 은 1/4분기, 04-06월은 2/4 분기, 
--07-09 월은 3/4 분기, 10-12월은 4/4 분기로 출력하라 (decode,case모두)
select name, jumin, 
       to_char(to_date(substr(jumin,1,6),'RRMMDD'),'Q') AS 분기,
       decode(to_char(to_date(substr(jumin,1,6),'RRMMDD'),'Q'),'1','1/4분기', -- to_char(to_date(substr(jumin,1,6),'RRMMDD') 문자이므로 '1','2','3' 문자로 표현한것!! 'Q' : 분기를 나타내는 포멧임!!
                                                               '2','2/4분기',
                                                               '3','3/4분기',
                                                                   '4/4분기') AS "분기1",
       case when to_number(substr(jumin,3,2)) between 1 and 3 then '1/4분기' -- to_number를 쓴 이유는 between 1 and 3 에서 1,3이 숫자임!!
            when to_number(substr(jumin,3,2)) between 4 and 6 then '2/4분기'
            when to_number(substr(jumin,3,2)) between 7 and 9 then '3/4분기'
                                                              else '4/4분기'
       end AS "분기2" -- case는 반드시 !!! end로 끗
  from student;

--2) EMP2 테이블에서 출생년도(1960,1970,1980,1990)별로 평균연봉을 구하라.
select trunc(to_char(BIRTHDAY,'YYYY'),-1), round(avg(pay)) -- pay컬럼에 NULL이 있다면, round(avg(nvl(pay,0)))으로 써야한다!
  from emp2
 group by trunc(to_char(BIRTHDAY,'YYYY'),-1);

--3) emp 테이블에서 인상된 연봉을 기준으로 2000 미만은 'C',
--2000이상 4000미만은 'B', 4000이상은 'A' 등급을 부여하여 각 직원의 현재 연봉과 함께 출력
--**인상된 연봉은 기존 연봉 대비 15% 상승률 + 보너스(comm)
select ename, sal, sal*1.15 + nvl(comm,0) AS SAL인상,
       case when sal*1.15 + nvl(comm,0) < 2000 then 'C'
            when sal*1.15 + nvl(comm,0) < 4000 then 'B' -- 이렇게 써도 되는 이유는 앞에서 'C'로 걸렀기 때문이다...
                                               else 'A'
        end AS 등급
  from emp;

--4) emp 테이블을 사용하여 연봉기준 등급을 아래의 기준에 맞게 표현하세요.
--2000미만 'C', 2000이상 3000이하 'B', 3000초과 'A'
select ename, sal, sign(sal-2000), sign(sal-3000),
       decode(sign(sal-2000),-1,'C',decode(sign(sal-3000),-1,'B',0,'B','A')), -- 중첩decode문. sign(sal-3000),-1,'B',0,'B' : 0이 들어간 이유는 '이하'라는 조건땜에...
       decode(sign(sal-2000),-1,'C',decode(sign(sal-3000),1,'A','B')) -- 두번째 3000 조건 비교..
  from emp;


--5) 레포트를 작성하고자 한다.
--emp 테이블을 이용하여 각 부서별 직원수를 출력하되 다음과 같은 형식으로 작성하여라.
--
--레포트명	       10_직원수	 20_직원수	  30_학생수
----------------------------------------------------------
--본인이름 레포트	        3	         5           6

select '김진만 레포트' AS 레포트명,                  -- group by 사용하는 것 아님. group by는 세로로 표현됨. 
       sum(decode(DEPTNO,10,1,0)) AS "10_직원수",    -- 다음과 같이 풀면 가로로 표현됨.
       sum(decode(DEPTNO,20,1,0)) AS "20_직원수",
       sum(decode(DEPTNO,30,1,0)) AS "30_직원수"
  from emp;
VAR=0
NAME=SQL2
STMT=196
--group by에 사용되지 않은 컬럼은 select절에 단독으로 사용할 수 없다.
--만약 select절에 반드시 기술해야 하는 컬림이 있다면 group by절에 컬럼 나열
--(단, 이때 기존 그룹에 대한 정보가 달라져서는 안됨)
--ex) 부서별 최대 연봉 구하기
select deptno, max(sal)
  from EMP
 group by deptno;
 
--ex) 부서별 최대 연봉, 이름 출력
select deptno, max(sal), ename  --에러발생 : 열 수가 ename과  group by와 안맞다.
  from EMP
 group by deptno;

select deptno AS 부서번호, max(sal), ename  
  from EMP
 group by deptno; -- 에러발생, 컬럼 별칭 Alias 사용 불가, group by가 select절보다 이전에 문법수행이 되므로...

--ex) 부서별 최대 연봉, 이름 출력
select deptno, max(sal), ename  --group by에 ename을 선언해주었기 때문에 에러는 발생하지 않지만, 원하는 정보는 얻을 수 없다.
  from EMP
 group by deptno, ename; -- 기존 그룹 정보와 달라짐 => 서브쿼리 사용으로 해결

-- 집합 연산자 : 집합(하나의 쿼리의 결과) 대 집합의 연산의 결과를 수행
-- 쿼리와 쿼리 사이에 집합 연산자 기술, 
-- 두 집합의 컬럼의 개수와 데이터타입, 의미 일치해야 함. 의미가 일치한다는 말이 컬럼별 순서를 맞춰준다는 말임. 즉 ename, sal, no순서를 위 아래 둘다 맞춰준다., 데이터타입도 완벽히 일치 시켜야 한다. 묵시적형변환 자체가 안된다.
-- 1) union / union all : 합집합
select ename, deptno, sal
  from EMP
 where deptno = 10
 union all
select ename, deptno, sal
  from EMP
 where deptno = 20
;

select ename, deptno, sal, comm -- 10번 부서에는 comm이 있지만, 20번 부서에는 없을 경우에는 NULL로 표현하거나, 상수를 표시하거나 한다. 단 위치는 맞춰준다. 만약 comm이 세번째 라면 세번째에 NULL이나 컬럼명을 작성해준다.
  from EMP
 where deptno = 10
 union all
select ename, deptno, sal, NULL -- 정상수행, 개수일치
  from EMP
 where deptno = 20
;


select ename, deptno, sal, comm -- 에러발생 : 컬럼 갯수 불일치
  from EMP
 where deptno = 10
 union all
select ename, deptno, sal
  from EMP
 where deptno = 20
;

select ename, deptno, sal, comm -- 에러발생 : 데이터 타입 불일치(comm, 'X').  데이터타입도 완벽히 일치 시켜야 한다. 묵시적형변환 자체가 안된다.
  from EMP
 where deptno = 10
 union all
select ename, deptno, sal, 'X'
  from EMP
 where deptno = 20
;

select ename, deptno, sal -- 에러발생 : 의미의 불일치(ename, deptno, sal/deptno, ename, sal)
  from EMP
 where deptno = 10
 union all
select deptno, ename, sal
  from EMP
 where deptno = 20
;

select ename, deptno, sal
  from EMP
 where deptno = 10
 union all -- 중복값 출력. 중복제거 안함. 정렬 사용 안한다.
select ename, deptno, sal
  from EMP
 where deptno in (10,20)
;

-- union : 두 집합의 중복 제거, 내부적 정렬 수행(같은 집합이라면 union all보다 느림)
select ename, deptno, sal
  from EMP
 where deptno = 10
 union -- 중복값 제거. 중복제거함. 중복값을 제거하기 위해 정렬을 사용한다. 속도가 느려진다.
select ename, deptno, sal
  from EMP
 where deptno in (10,20)  
;
-- union과 union all의 결과가 같다면 무조건 union all을 써라. 이유 : 내부정렬을 피하기 위해서.

-- 2) intersect : 교집합
-- 3) minus : 차집합. 순서 중요!! '위'의 집합에서 '아래'집합을 뺀다.


-- 예제) emp테이블과 emp2테이블을 병합하려 한다. 아래 규칙을 따라 병합하세요.
-- 출력 결과는 사번, 이름, 부서번호, 연봉(sal 또는 pay)
-- 사원번호는 모두 네자리로 통일(emp2의 empno의 마지막 네자리)
-- emp2 테이블의 직원은 부서번호가 40으로 가정
-- emp2 테이블으 pay도 만단위로 출력(60000000 => 6000)

select to_char(EMPNO),ENAME,DEPTNO,SAL
  from emp
 union all
select substr(EMPNO,5,4),NAME,40,to_number(substr(pay,1,length(pay)-4))
  from EMP2
;

select to_char(EMPNO),ENAME,DEPTNO,SAL
  from emp
 union all
select substr(EMPNO,5,4),NAME,40,pay/10000
  from EMP2
;


select EMPNO,ENAME,DEPTNO,SAL
  from emp
 union all
select to_number(substr(EMPNO,5,4)),NAME,40,to_number(substr(pay,1,length(pay)-4))
  from EMP2
;

select EMPNO,ENAME,DEPTNO,SAL
  from emp
 union all
select to_number(substr(EMPNO,-4,4)),NAME,40,PAY/10000 -- to_number를 씌웠을때 맨 앞 0을 출력을 안한다.!! 정 쓰고 싶으면 to_ char(substr(EMPNO,-4,4))형식으로 쓴다.
  from EMP2
;

select EMPNO,ENAME,DEPTNO,SAL
  from emp
 union all
select to_number(substr(EMPNO,5,4)),NAME,40,PAY/10000 -- to_number를 씌웠을때 맨 앞 0을 출력을 안한다.!! 정 쓰고 싶으면 to_ char(substr(EMPNO,-4,4))형식으로 쓴다.
  from EMP2
;


-- join : 관계가 있는 두 개 이상의 테이블을 하나로 합치는 방법(컬럼 결합)
-- 엑셀의 참조기능과 비슷
-- 카티시안 프로덕트(카티시안 곱) : 조인 조건을 잘못 기술하거나 생략하는 경우 모든 경우의 수 출력
select *
  from emp, dept
 order by ename;
 
select EMPNO,emp.DEPTNO,DNAME,SAL 
  from emp, dept
 where emp.deptno = dept.deptno -- 컬럼의 출처를 꼭 밝혀야 한다.
   and emp.deptno = 10
 order by ename;

select EMPNO,emp.DEPTNO,DNAME,SAL -- 셀렉트 절에서도 컬럼이 중복하면 파싱을 못하므로 출처를 꼭 밝히기..!!
  from emp, dept
 where emp.deptno = dept.deptno; -- 컬럼이 중복되면 파싱을 못하므로 출처를 꼭 밝혀야 한다.


-- 테이블 별칭(Alias) : 조인시 컬럼 앞에 테이블 명을 붙여야 하는 경우 주로 사용
-- AS 없이 테이블 명 바로 뒤에 별칭 기술
-- 하나의 쿼리에서 테이블 별칭과 테이블 명은 함께 사용 될 수 없다.
select EMPNO, e.DEPTNO,DNAME,SAL 
  from emp e, dept d
 where e.deptno = d.deptno;
 
-- 1) equi - join(등가 조인) : 조인 조건이 '같다'인 경우
-- 예제1) STUDENT테이블과 EXAM_01테이블을 사용하여
-- 각 학생의 이름, 학년, 제 1전공 학과번호(deptno1), 시험성적을 출력하여라
select NAME,GRADE,DEPTNO1,TOTAL
  from student s, EXAM_01 e
 where s.STUDNO = e.STUDNO;

-- 예제2) STUDENT테이블과 DEPARTMENT 테이블을 사용하여
-- 각 학생의 이름, 학년, 제1전공(deptno1)명을 출력하여라
select NAME,GRADE,DNAME
  from student s, department d
 where s.DEPTNO1 = d.DEPTNO; -- 컬럼이름이 다를경우 alias를 굳이 밝혀줄 필요는 없다. 그래도 출처 밝히는 습관은 들일것!!
 
 
 
s-d e
|
e
=> e-s-d;

-- 예제3) 위 테이블을 모두 사용하여 학생의 이름, 학년, 제1전공명, 시험성ㅇ적 출력
-- 테이블 관계 : e-s-d
--                 |
--                 p
select s.name, grade, dname, total, p.NAME 지도교수
  from student s, department d, EXAM_01 e, PROFESSOR p
 where s.DEPTNO1 = d.DEPTNO
   and s.STUDNO  = e.STUDNO
   and s.PROFNO  = p.PROFNO
   ;
-- 내추럴조인 : NULL값 제외하고 출력
-- 아웃터조인 : NULL값 포함하고 출력
VAR=0
